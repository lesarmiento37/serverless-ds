service: devops-days-lambda-function
useDotenv: true
#comment
frameworkVersion: '3'

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-log-retention
  - serverless-prune-plugin
  - serverless-step-functions
  - serverless-plugin-aws-alerts
  - serverless-plugin-split-stacks
  - serverless-python-requirements
custom:
  environments:
    staging: 'Staging'
  businessImpact:
    staging: 'Staging'
  prune:
    automatic: true
    includeLayers: true
    number: ${env:PRUNE_NUMBER}
  pythonRequirements:
    dockerizePip: true
    useStaticCache: false 
  serviceTags:
    Managed-by: 'serverless-framework'
    Team: 'DevOpsDays'
    Country: 'Colombia'
    Owner: 'Leonardo Sarmiento'
  dotenv:
    include: none
package:
  individually: true

provider:
  name: aws
  runtime: python3.10
  runtimeManagement: auto 
  region: ${env:REGION}
  stackName: ${self:service}
  stage: ${opt:stage, 'default'}
  memorySize: 512
  timeout: ${env:TIMEOUT}
  logRetentionInDays: ${env:LOGS_RETENTION_DAYS}
  stackTags: ${self:custom.serviceTags}
resources:
  Resources:
    iamRoleDevopsDaysLambdaFunction: ${file(infrastructure/iam/lambdas/iam_devops_days_lambda_function.yaml):iamRoleDevopsDaysLambdaFunction}
    #iamDevopsDaysLambdaFunctionExecution: ${file(infrastructure/iam/rules/iam_devops_days_rule.yaml):iamDevopsDaysLambdaFunctionExecution}
    DevopsDaysRule: ${file(infrastructure/rules/devops_days_rule.yaml):DevopsDaysRule}
functions:
  - ${file(infrastructure/functions/devops_days_lambda_function.yaml)}
