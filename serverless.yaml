service: devops-days-lambda-function
useDotenv: true
#comment
frameworkVersion: '3'

plugins:
  - serverless-dotenv-plugin
 # - serverless-plugin-log-retention
  - serverless-prune-plugin
  - serverless-step-functions
  - serverless-plugin-aws-alerts
  - serverless-plugin-split-stacks
  - serverless-python-requirements
custom:
  environments:
    staging: 'Staging'
  businessImpact:
    staging: 'Staging'
  prune:
    automatic: true
    includeLayers: true
    number: ${env:PRUNE_NUMBER}
  pythonRequirements:
    dockerizePip: true
    useStaticCache: false 
  serviceTags:
    Managed-by: 'serverless-framework'
    Team: 'DevOpsDays'
    Country: 'Colombia'
    Owner: 'Leonardo Sarmiento'
  dotenv:
    include: none
package:
  individually: true

provider:
  name: aws
  runtime: python3.10
  runtimeManagement: auto 
  region: ${env:REGION}
  stackName: ${self:service}
  stage: ${opt:stage, 'default'}
  memorySize: 512
  timeout: ${env:TIMEOUT}
  logRetentionInDays: ${env:LOGS_RETENTION_DAYS}
  stackTags: ${self:custom.serviceTags}
resources:
  Resources:
    iamRoleS3toDynamoDBLambdaFunction: ${file(infrastructure/iam/lambda/iam_s3_to_dynamodb.yaml):iamRoleS3toDynamoDBLambdaFunction}
    iamRoleDynamoDBAnalyzerLambdaFunction: ${file(infrastructure/iam/lambda/iam_dynamodb_analyzer.yaml):iamRoleDynamoDBAnalyzerLambdaFunction}
    DevopsDaysTable: ${file(infrastructure/dynamodb/devops_days_db_table.yaml):DevopsDaysTable}
functions:
  - ${file(infrastructure/lambdas/s3_to_dynamodb.yaml)}
  - ${file(infrastructure/lambdas/dynamodb_analyzer.yaml)}
stepFunctions:
  stateMachines:
    S3DynamodbAnalyzer:
      ${file(infrastructure/step_functions/s3_dynamo_analyzer.yaml)}